{"version":3,"sources":["components/Square/index.js","components/Board/index.js","components/Game/index.js","helpers.js","components/Container/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","className","Board","squares","map","square","i","key","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","winner","lines","length","a","b","c","calculateWinner","timeInHistory","slice","current","_step","move","destination","step","Container","props","fluid","Wrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAaeA,MATf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACvB,OACE,6BACE,4BAAQC,UAAU,UAAUD,QAASA,GAClCD,K,MCKMG,MATf,YAAsC,IAArBC,EAAoB,EAApBA,QAASH,EAAW,EAAXA,QACxB,OACE,yBAAKC,UAAU,SACZE,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,kBAAC,EAAD,CAAQC,IAAKD,EAAGP,MAAOM,EAAQL,QAAS,kBAAMA,EAAQM,W,MCkD/CE,MArDf,WAAiB,IAAD,EACgBC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QADxC,mBACPC,EADO,KACEC,EADF,OAEsBJ,mBAAS,GAF/B,mBAEPK,EAFO,KAEKC,EAFL,OAGgBN,oBAAS,GAHzB,mBAGPO,EAHO,KAGEC,EAHF,KAIRC,ECRD,SAAyBf,GAa9B,IAXA,IAAMgB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAb,EAAI,EAAGA,EAAIa,EAAMC,OAAQd,IAAK,mBAEnBa,EAAMb,GAFa,GAE9Be,EAF8B,KAE3BC,EAF2B,KAExBC,EAFwB,KAKrC,GAAIpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GACpE,OAAOpB,EAAQkB,GAInB,OAAO,KDfQG,CAAgBZ,EAAQE,IAmCvC,OACE,oCACE,kBAAC,EAAD,CAAOX,QAASS,EAAQE,GAAad,QAnCrB,SAAAM,GAElB,IAAMmB,EAAgBb,EAAQc,MAAM,EAAGZ,EAAa,GAC9Ca,EAAUF,EAAcX,GAExBX,EAAO,YAAOwB,GAIhBT,GAAUf,EAAQG,KACtBH,EAAQG,GAAKU,EAAU,IAAM,IAC7BH,EAAW,GAAD,mBAAKY,GAAL,CAAoBtB,KAC9BY,EAAcU,EAAcL,QAC5BH,GAAYD,OAuBV,yBAAKf,UAAU,QACb,4BACGiB,EACG,kBAAoBA,EACpB,iBAAmBF,EAAU,IAAM,MAlB7CJ,EAAQR,KAAI,SAACwB,EAAOC,GAClB,IAAMC,EAAcD,EAAI,sBAAkBA,GAAS,eACnD,OACE,wBAAI5B,UAAU,YAAYM,IAAKsB,GAC7B,4BAAQ5B,UAAU,cAAcD,QAAS,kBAT/Ce,EADagB,EAU+CF,QAR5DZ,EAAWc,EAAO,IAAM,GAFX,IAAAA,IAWJD,U,ME9BEE,MALf,SAAmBC,GACjB,OACE,uCAAKhC,UAAS,mBAAcgC,EAAMC,MAAQ,SAAW,KAAUD,K,MCEpDE,MAJf,SAAiBF,GACf,OAAO,wCAAMhC,UAAU,WAAcgC,KCiBxBG,MAhBf,WACE,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,4BACE,uBAAGnC,UAAU,cADf,eAC4C,IAC1C,uBAAGA,UAAU,eAEf,kBAAC,EAAD,UCFUoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03e5b22f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Destructure props from react component for value and onClick\nfunction Square({ value, onClick }) {\n  return (\n    <div>\n      <button className=\"squares\" onClick={onClick}>\n        {value}\n      </button>\n    </div>\n  );\n}\nexport default Square;\n","import React from \"react\";\nimport Square from \"../Square\";\nimport \"./style.css\";\n\nfunction Board({ squares, onClick }) {\n  return (\n    <div className=\"board\">\n      {squares.map((square, i) => (\n        <Square key={i} value={square} onClick={() => onClick(i)} />\n      ))}\n    </div>\n  );\n}\nexport default Board;\n","import React, { useState } from \"react\";\nimport Board from \"../Board\";\nimport { calculateWinner } from \"../../helpers\";\nimport \"./style.css\";\n\nfunction Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const winner = calculateWinner(history[stepNumber]);\n\n  const handleClick = i => {\n    //slice out the history we do not need, like the state afterward, because the state will be changing\n    const timeInHistory = history.slice(0, stepNumber + 1);\n    const current = timeInHistory[stepNumber];\n    //clone of the state we will be changing\n    const squares = [...current];\n    //If user clicks on an occupied square or if there is a winner, return\n    //else if xIsNext is true then \"X\" otherwise \"O\"\n    //setHistory state values\n    if (winner || squares[i]) return;\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory([...timeInHistory, squares]);\n    setStepNumber(timeInHistory.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const renderMoves = () =>\n    history.map((_step, move) => {\n      const destination = move ? `Go to Move #${move}` : \"Restart Game\";\n      return (\n        <li className=\"listStyle\" key={move}>\n          <button className=\"moveButtons\" onClick={() => jumpTo(move)}>\n            {destination}\n          </button>\n        </li>\n      );\n    });\n\n  return (\n    <>\n      <Board squares={history[stepNumber]} onClick={handleClick} />\n      <div className=\"game\">\n        <h3>\n          {winner\n            ? \"Winner! Player \" + winner\n            : \"Next Player: \" + (xIsNext ? \"X\" : \"O\")}\n        </h3>\n        {renderMoves()}\n      </div>\n    </>\n  );\n}\nexport default Game;\n","//Takes in squares as an arguements as the current board state.\nexport function calculateWinner(squares) {\n  //Winning conditions\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [1, 4, 7],\n    [0, 3, 6],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    //Destructures out array values\n    const [a, b, c] = lines[i];\n    //Check if there is a player move on the first row, check if first value equals the second value, check then if the first value equals the third value,\n    //if they match then we have a winner\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  //Otherwise return null because there is  no winner\n  return null;\n}\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return (\n    <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\n  );\n}\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport Game from \"./components/Game\";\nimport Container from \"./components/Container\";\nimport Wrapper from \"./components/Wrapper\";\n\nfunction App() {\n  return (\n    <div>\n      <Wrapper>\n        <Container>\n          <h1>\n            <i className=\"fas fa-th\"></i> Tic Tac Toe{\" \"}\n            <i className=\"fas fa-th\"></i>\n          </h1>\n          <Game />\n        </Container>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}