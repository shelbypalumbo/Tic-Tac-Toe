{"ast":null,"code":"var _jsxFileName = \"/Users/shelbypalumbo/tic_tac_toe/src/components/Game.js\";\nimport React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport { calculateWinner } from \"../helpers\";\nconst style = {\n  width: \"200px\",\n  margin: \"20px auto\"\n};\n\nfunction Game() {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const winner = calculateWinner(board);\n\n  const handleClick = i => {\n    const boardDuplicate = [...board]; //If user clicks on an occupied square or if there is a winner, return\n    //else if xIsNext is true then \"X\" otherwise \"O\"\n    //setBoard state values\n\n    if (winner || boardDuplicate[i]) return;\n    boardDuplicate[i] = xIsNext ? \"X\" : \"O\";\n    setBoard(boardDuplicate);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = () => {};\n\n  const renderMoves = () => {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => setBoard(Array(9).fill(null)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, \"Start the Game!\");\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Board, {\n    squares: board,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, winner ? \"Winner \" + winner : \"Next Player \" + (xIsNext ? \"X\" : \"O\"), renderMoves())));\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/shelbypalumbo/tic_tac_toe/src/components/Game.js"],"names":["React","useState","Board","calculateWinner","style","width","margin","Game","board","setBoard","Array","fill","xIsNext","setXIsNext","winner","handleClick","i","boardDuplicate","jumpTo","renderMoves"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,eAAT,QAAgC,YAAhC;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,OADK;AAEZC,EAAAA,MAAM,EAAE;AAFI,CAAd;;AAKA,SAASC,IAAT,GAAgB;AACd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACS,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAlC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMa,MAAM,GAAGX,eAAe,CAACK,KAAD,CAA9B;;AAEA,QAAMO,WAAW,GAAGC,CAAC,IAAI;AACvB,UAAMC,cAAc,GAAG,CAAC,GAAGT,KAAJ,CAAvB,CADuB,CAEvB;AACA;AACA;;AACA,QAAIM,MAAM,IAAIG,cAAc,CAACD,CAAD,CAA5B,EAAiC;AACjCC,IAAAA,cAAc,CAACD,CAAD,CAAd,GAAoBJ,OAAO,GAAG,GAAH,GAAS,GAApC;AACAH,IAAAA,QAAQ,CAACQ,cAAD,CAAR;AACAJ,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GATD;;AAWA,QAAMM,MAAM,GAAG,MAAM,CAAE,CAAvB;;AACA,QAAMC,WAAW,GAAG,MAAM;AACxB,wBACE;AAAQ,MAAA,OAAO,EAAE,MAAMV,QAAQ,CAACC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF;AAKD,GAND;;AAQA,sBACE,uDACE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEH,KAAhB;AAAuB,IAAA,OAAO,EAAEO,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,KAAK,EAAEX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,MAAM,GAAG,YAAYA,MAAf,GAAwB,kBAAkBF,OAAO,GAAG,GAAH,GAAS,GAAlC,CADjC,EAEGO,WAAW,EAFd,CADF,CAFF,CADF;AAWD;;AACD,eAAeZ,IAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport { calculateWinner } from \"../helpers\";\n\nconst style = {\n  width: \"200px\",\n  margin: \"20px auto\"\n};\n\nfunction Game() {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const winner = calculateWinner(board);\n\n  const handleClick = i => {\n    const boardDuplicate = [...board];\n    //If user clicks on an occupied square or if there is a winner, return\n    //else if xIsNext is true then \"X\" otherwise \"O\"\n    //setBoard state values\n    if (winner || boardDuplicate[i]) return;\n    boardDuplicate[i] = xIsNext ? \"X\" : \"O\";\n    setBoard(boardDuplicate);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = () => {};\n  const renderMoves = () => {\n    return (\n      <button onClick={() => setBoard(Array(9).fill(null))}>\n        Start the Game!\n      </button>\n    );\n  };\n\n  return (\n    <>\n      <Board squares={board} onClick={handleClick} />\n      <div style={style}>\n        <p>\n          {winner ? \"Winner \" + winner : \"Next Player \" + (xIsNext ? \"X\" : \"O\")}\n          {renderMoves()}\n        </p>\n      </div>\n    </>\n  );\n}\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}