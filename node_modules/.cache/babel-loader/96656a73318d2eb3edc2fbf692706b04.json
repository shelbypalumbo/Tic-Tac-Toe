{"ast":null,"code":"//Takes in squares as an arguements as the current board state.\nexport function calculateWinner(squares) {\n  //Winning conditions\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [1, 4, 7], [0, 3, 6], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; //\n\n  for (let i = 0; i < lines.length; i++) {\n    //Destructures out array values\n    const [a, b, c] = lines[i]; //Check if there is a player move on the first row, check if first value equals the second value, check then if the first value equals the third value,\n    //if they match then we have a winner\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  } //Otherwise return null because there is  no winner\n\n\n  return null;\n}","map":{"version":3,"sources":["/Users/shelbypalumbo/tic_tac_toe/src/helpers.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c"],"mappings":"AAAA;AACA,OAAO,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AACvC;AACA,QAAMC,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARY,CAAd,CAFuC,CAavC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC;AACA,UAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYL,KAAK,CAACC,CAAD,CAAvB,CAFqC,CAGrC;AACA;;AACA,QAAIF,OAAO,CAACI,CAAD,CAAP,IAAcJ,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACK,CAAD,CAApC,IAA2CL,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACM,CAAD,CAArE,EAA0E;AACxE,aAAON,OAAO,CAACI,CAAD,CAAd;AACD;AACF,GAtBsC,CAuBvC;;;AACA,SAAO,IAAP;AACD","sourcesContent":["//Takes in squares as an arguements as the current board state.\nexport function calculateWinner(squares) {\n  //Winning conditions\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [1, 4, 7],\n    [0, 3, 6],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  //\n  for (let i = 0; i < lines.length; i++) {\n    //Destructures out array values\n    const [a, b, c] = lines[i];\n    //Check if there is a player move on the first row, check if first value equals the second value, check then if the first value equals the third value,\n    //if they match then we have a winner\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  //Otherwise return null because there is  no winner\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}