{"ast":null,"code":"import _toConsumableArray from\"/Users/shelbypalumbo/Tic-Tac-Toe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/shelbypalumbo/Tic-Tac-Toe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import Board from\"../Board\";import{calculateWinner}from\"../../helpers\";import\"./style.css\";function Game(){var _useState=useState([Array(9).fill(null)]),_useState2=_slicedToArray(_useState,2),history=_useState2[0],setHistory=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),stepNumber=_useState4[0],setStepNumber=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),xIsNext=_useState6[0],setXIsNext=_useState6[1];var winner=calculateWinner(history[stepNumber]);var handleClick=function handleClick(i){//slice out the history we do not need, like the state afterward, because the state will be changing\nvar timeInHistory=history.slice(0,stepNumber+1);var current=timeInHistory[stepNumber];//clone of the state we will be changing\nvar squares=_toConsumableArray(current);//If user clicks on an occupied square or if there is a winner, return\n//else if xIsNext is true then \"X\" otherwise \"O\"\n//setHistory state values\nif(winner||squares[i])return;squares[i]=xIsNext?\"X\":\"O\";setHistory([].concat(_toConsumableArray(timeInHistory),[squares]));setStepNumber(timeInHistory.length);setXIsNext(!xIsNext);};var jumpTo=function jumpTo(step){setStepNumber(step);setXIsNext(step%2===0);};var renderMoves=function renderMoves(){return history.map(function(_step,move){var destination=move?\"Go to Move #\".concat(move):\"Restart Game\";return/*#__PURE__*/React.createElement(\"li\",{className:\"listStyle\",key:move},/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return jumpTo(move);}},destination));});};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Board,{squares:history[stepNumber],onClick:handleClick}),/*#__PURE__*/React.createElement(\"div\",{className:\"game\"},/*#__PURE__*/React.createElement(\"h2\",null,winner?\"Winner! Player \"+winner:\"Next Player: \"+(xIsNext?\"X\":\"O\"),renderMoves())));}export default Game;","map":{"version":3,"sources":["/Users/shelbypalumbo/Tic-Tac-Toe/src/components/Game/index.js"],"names":["React","useState","Board","calculateWinner","Game","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","winner","handleClick","i","timeInHistory","slice","current","squares","length","jumpTo","step","renderMoves","map","_step","move","destination"],"mappings":"sTAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,OAASC,eAAT,KAAgC,eAAhC,CACA,MAAO,aAAP,CAEA,QAASC,CAAAA,IAAT,EAAgB,eACgBH,QAAQ,CAAC,CAACI,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAD,CADxB,wCACPC,OADO,eACEC,UADF,8BAEsBP,QAAQ,CAAC,CAAD,CAF9B,yCAEPQ,UAFO,eAEKC,aAFL,8BAGgBT,QAAQ,CAAC,IAAD,CAHxB,yCAGPU,OAHO,eAGEC,UAHF,eAId,GAAMC,CAAAA,MAAM,CAAGV,eAAe,CAACI,OAAO,CAACE,UAAD,CAAR,CAA9B,CAEA,GAAMK,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,CAAC,CAAI,CACvB;AACA,GAAMC,CAAAA,aAAa,CAAGT,OAAO,CAACU,KAAR,CAAc,CAAd,CAAiBR,UAAU,CAAG,CAA9B,CAAtB,CACA,GAAMS,CAAAA,OAAO,CAAGF,aAAa,CAACP,UAAD,CAA7B,CACA;AACA,GAAMU,CAAAA,OAAO,oBAAOD,OAAP,CAAb,CACA;AACA;AACA;AACA,GAAIL,MAAM,EAAIM,OAAO,CAACJ,CAAD,CAArB,CAA0B,OAC1BI,OAAO,CAACJ,CAAD,CAAP,CAAaJ,OAAO,CAAG,GAAH,CAAS,GAA7B,CACAH,UAAU,8BAAKQ,aAAL,GAAoBG,OAApB,GAAV,CACAT,aAAa,CAACM,aAAa,CAACI,MAAf,CAAb,CACAR,UAAU,CAAC,CAACD,OAAF,CAAV,CACD,CAdD,CAgBA,GAAMU,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,IAAI,CAAI,CACrBZ,aAAa,CAACY,IAAD,CAAb,CACAV,UAAU,CAACU,IAAI,CAAG,CAAP,GAAa,CAAd,CAAV,CACD,CAHD,CAKA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,SAClBhB,CAAAA,OAAO,CAACiB,GAAR,CAAY,SAACC,KAAD,CAAQC,IAAR,CAAiB,CAC3B,GAAMC,CAAAA,WAAW,CAAGD,IAAI,uBAAkBA,IAAlB,EAA2B,cAAnD,CACA,mBACE,0BAAI,SAAS,CAAC,WAAd,CAA0B,GAAG,CAAEA,IAA/B,eACE,8BAAQ,OAAO,CAAE,yBAAML,CAAAA,MAAM,CAACK,IAAD,CAAZ,EAAjB,EAAsCC,WAAtC,CADF,CADF,CAKD,CAPD,CADkB,EAApB,CAUA,mBACE,qDACE,oBAAC,KAAD,EAAO,OAAO,CAAEpB,OAAO,CAACE,UAAD,CAAvB,CAAqC,OAAO,CAAEK,WAA9C,EADF,cAEE,2BAAK,SAAS,CAAC,MAAf,eACE,8BACGD,MAAM,CACH,kBAAoBA,MADjB,CAEH,iBAAmBF,OAAO,CAAG,GAAH,CAAS,GAAnC,CAHN,CAIGY,WAAW,EAJd,CADF,CAFF,CADF,CAaD,CACD,cAAenB,CAAAA,IAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Board from \"../Board\";\nimport { calculateWinner } from \"../../helpers\";\nimport \"./style.css\";\n\nfunction Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const winner = calculateWinner(history[stepNumber]);\n\n  const handleClick = i => {\n    //slice out the history we do not need, like the state afterward, because the state will be changing\n    const timeInHistory = history.slice(0, stepNumber + 1);\n    const current = timeInHistory[stepNumber];\n    //clone of the state we will be changing\n    const squares = [...current];\n    //If user clicks on an occupied square or if there is a winner, return\n    //else if xIsNext is true then \"X\" otherwise \"O\"\n    //setHistory state values\n    if (winner || squares[i]) return;\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory([...timeInHistory, squares]);\n    setStepNumber(timeInHistory.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const renderMoves = () =>\n    history.map((_step, move) => {\n      const destination = move ? `Go to Move #${move}` : \"Restart Game\";\n      return (\n        <li className=\"listStyle\" key={move}>\n          <button onClick={() => jumpTo(move)}>{destination}</button>\n        </li>\n      );\n    });\n\n  return (\n    <>\n      <Board squares={history[stepNumber]} onClick={handleClick} />\n      <div className=\"game\">\n        <h2>\n          {winner\n            ? \"Winner! Player \" + winner\n            : \"Next Player: \" + (xIsNext ? \"X\" : \"O\")}\n          {renderMoves()}\n        </h2>\n      </div>\n    </>\n  );\n}\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}