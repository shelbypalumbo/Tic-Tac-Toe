{"ast":null,"code":"import _slicedToArray from\"/Users/shelbypalumbo/Tic-Tac-Toe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";//Takes in squares as an arguements as the current board state.\nexport function calculateWinner(squares){//Winning conditions\nvar lines=[[0,1,2],[3,4,5],[6,7,8],[1,4,7],[0,3,6],[2,5,8],[0,4,8],[2,4,6]];for(var i=0;i<lines.length;i++){//Destructures out array values\nvar _lines$i=_slicedToArray(lines[i],3),a=_lines$i[0],b=_lines$i[1],c=_lines$i[2];//Check if there is a player move on the first row, check if first value equals the second value, check then if the first value equals the third value,\n//if they match then we have a winner\nif(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){return squares[a];}}//Otherwise return null because there is  no winner\nreturn null;}","map":{"version":3,"sources":["/Users/shelbypalumbo/Tic-Tac-Toe/src/helpers.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c"],"mappings":"uJAAA;AACA,MAAO,SAASA,CAAAA,eAAT,CAAyBC,OAAzB,CAAkC,CACvC;AACA,GAAMC,CAAAA,KAAK,CAAG,CACZ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CADY,CAEZ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAFY,CAGZ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAHY,CAIZ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAJY,CAKZ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CALY,CAMZ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CANY,CAOZ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAPY,CAQZ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CARY,CAAd,CAWA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,KAAK,CAACE,MAA1B,CAAkCD,CAAC,EAAnC,CAAuC,CACrC;AADqC,4BAEnBD,KAAK,CAACC,CAAD,CAFc,IAE9BE,CAF8B,aAE3BC,CAF2B,aAExBC,CAFwB,aAGrC;AACA;AACA,GAAIN,OAAO,CAACI,CAAD,CAAP,EAAcJ,OAAO,CAACI,CAAD,CAAP,GAAeJ,OAAO,CAACK,CAAD,CAApC,EAA2CL,OAAO,CAACI,CAAD,CAAP,GAAeJ,OAAO,CAACM,CAAD,CAArE,CAA0E,CACxE,MAAON,CAAAA,OAAO,CAACI,CAAD,CAAd,CACD,CACF,CACD;AACA,MAAO,KAAP,CACD","sourcesContent":["//Takes in squares as an arguements as the current board state.\nexport function calculateWinner(squares) {\n  //Winning conditions\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [1, 4, 7],\n    [0, 3, 6],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    //Destructures out array values\n    const [a, b, c] = lines[i];\n    //Check if there is a player move on the first row, check if first value equals the second value, check then if the first value equals the third value,\n    //if they match then we have a winner\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  //Otherwise return null because there is  no winner\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}