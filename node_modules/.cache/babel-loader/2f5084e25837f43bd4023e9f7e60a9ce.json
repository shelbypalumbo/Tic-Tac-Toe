{"ast":null,"code":"var _jsxFileName = \"/Users/shelbypalumbo/tic_tac_toe/src/components/Game.js\";\nimport React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport { calculateWinner } from \"../helpers\";\nconst style = {\n  width: \"200px\",\n  margin: \"20px auto\"\n};\nconst listStyle = {\n  listStyleType: \"none\"\n};\n\nfunction Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const winner = calculateWinner(history[stepNumber]);\n\n  const handleClick = i => {\n    //slice out history we dont need, like state aftward, because the state will be changing\n    const timeInHistory = history.slice(0, stepNumber + 1);\n    const current = timeInHistory[stepNumber]; //clone of the state we will be changing\n\n    const squares = [...current]; //If user clicks on an occupied square or if there is a winner, return\n    //else if xIsNext is true then \"X\" otherwise \"O\"\n    //setHistory state values\n\n    if (winner || squares[i]) return;\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory([...timeInHistory, squares]);\n    setStepNumber(timeInHistory.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const renderMoves = () => history.map((_step, move) => {\n    const destination = move ? `Go to Move #${move}` : \"Go to Start\";\n    return /*#__PURE__*/React.createElement(\"li\", {\n      style: listStyle,\n      key: move,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => jumpTo(move),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, destination));\n  });\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Board, {\n    squares: history[stepNumber],\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, winner ? \"Winner! Player \" + winner : \"Next Player: \" + (xIsNext ? \"X\" : \"O\"), renderMoves())));\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/shelbypalumbo/tic_tac_toe/src/components/Game.js"],"names":["React","useState","Board","calculateWinner","style","width","margin","listStyle","listStyleType","Game","history","setHistory","Array","fill","stepNumber","setStepNumber","xIsNext","setXIsNext","winner","handleClick","i","timeInHistory","slice","current","squares","length","jumpTo","step","renderMoves","map","_step","move","destination"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,eAAT,QAAgC,YAAhC;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,OADK;AAEZC,EAAAA,MAAM,EAAE;AAFI,CAAd;AAKA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,aAAa,EAAE;AADC,CAAlB;;AAIA,SAASC,IAAT,GAAgB;AACd,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAACW,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAD,CAAtC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMiB,MAAM,GAAGf,eAAe,CAACO,OAAO,CAACI,UAAD,CAAR,CAA9B;;AAEA,QAAMK,WAAW,GAAGC,CAAC,IAAI;AACvB;AACA,UAAMC,aAAa,GAAGX,OAAO,CAACY,KAAR,CAAc,CAAd,EAAiBR,UAAU,GAAG,CAA9B,CAAtB;AACA,UAAMS,OAAO,GAAGF,aAAa,CAACP,UAAD,CAA7B,CAHuB,CAIvB;;AACA,UAAMU,OAAO,GAAG,CAAC,GAAGD,OAAJ,CAAhB,CALuB,CAMvB;AACA;AACA;;AACA,QAAIL,MAAM,IAAIM,OAAO,CAACJ,CAAD,CAArB,EAA0B;AAC1BI,IAAAA,OAAO,CAACJ,CAAD,CAAP,GAAaJ,OAAO,GAAG,GAAH,GAAS,GAA7B;AACAL,IAAAA,UAAU,CAAC,CAAC,GAAGU,aAAJ,EAAmBG,OAAnB,CAAD,CAAV;AACAT,IAAAA,aAAa,CAACM,aAAa,CAACI,MAAf,CAAb;AACAR,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAdD;;AAgBA,QAAMU,MAAM,GAAGC,IAAI,IAAI;AACrBZ,IAAAA,aAAa,CAACY,IAAD,CAAb;AACAV,IAAAA,UAAU,CAACU,IAAI,GAAG,CAAP,KAAa,CAAd,CAAV;AACD,GAHD;;AAKA,QAAMC,WAAW,GAAG,MAClBlB,OAAO,CAACmB,GAAR,CAAY,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC3B,UAAMC,WAAW,GAAGD,IAAI,GAAI,eAAcA,IAAK,EAAvB,GAA2B,aAAnD;AACA,wBACE;AAAI,MAAA,KAAK,EAAExB,SAAX;AAAsB,MAAA,GAAG,EAAEwB,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,OAAO,EAAE,MAAML,MAAM,CAACK,IAAD,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCC,WAAtC,CADF,CADF;AAKD,GAPD,CADF;;AAUA,sBACE,uDACE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEtB,OAAO,CAACI,UAAD,CAAvB;AAAqC,IAAA,OAAO,EAAEK,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,KAAK,EAAEf,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGc,MAAM,GACH,oBAAoBA,MADjB,GAEH,mBAAmBF,OAAO,GAAG,GAAH,GAAS,GAAnC,CAHN,EAIGY,WAAW,EAJd,CADF,CAFF,CADF;AAaD;;AACD,eAAenB,IAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport { calculateWinner } from \"../helpers\";\n\nconst style = {\n  width: \"200px\",\n  margin: \"20px auto\"\n};\n\nconst listStyle = {\n  listStyleType: \"none\"\n};\n\nfunction Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const winner = calculateWinner(history[stepNumber]);\n\n  const handleClick = i => {\n    //slice out history we dont need, like state aftward, because the state will be changing\n    const timeInHistory = history.slice(0, stepNumber + 1);\n    const current = timeInHistory[stepNumber];\n    //clone of the state we will be changing\n    const squares = [...current];\n    //If user clicks on an occupied square or if there is a winner, return\n    //else if xIsNext is true then \"X\" otherwise \"O\"\n    //setHistory state values\n    if (winner || squares[i]) return;\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory([...timeInHistory, squares]);\n    setStepNumber(timeInHistory.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const renderMoves = () =>\n    history.map((_step, move) => {\n      const destination = move ? `Go to Move #${move}` : \"Go to Start\";\n      return (\n        <li style={listStyle} key={move}>\n          <button onClick={() => jumpTo(move)}>{destination}</button>\n        </li>\n      );\n    });\n\n  return (\n    <>\n      <Board squares={history[stepNumber]} onClick={handleClick} />\n      <div style={style}>\n        <h1>\n          {winner\n            ? \"Winner! Player \" + winner\n            : \"Next Player: \" + (xIsNext ? \"X\" : \"O\")}\n          {renderMoves()}\n        </h1>\n      </div>\n    </>\n  );\n}\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}